Programming standard: 

First we need to know what programming standard is.  Programming standards are an important feature of software development.  One needs to ensure a coding standard specifying different programming language methods and different processes for a particular programming language.  Which all team members have to abide by while working on the project.  This will keep the program code the same and it will look like it was created by a single developer in a single session.

Coding standard we should follow:

• The code should be easy to be read by every team members.

• We should try to bifurcate different sections of the developed code by segmenting blocks of code into a certain paragraph.

•We should try to make use of indentation for indicating the beginning and end of the control structures with a clear mentioning of where an exact code is between them.

•There should be consistency in the naming convention of the variables throughout the developed code.

•Name the functions based on what they perform.

• The code should be easily understood even after returning to it after some time.

• Follow a specific method for commenting on the work. The language functions which are complex or the structure which is difficult to be comprehended should be avoided.

1. HTML Standard:
*-----------------------*

	1.1.  Validation  

All HTML pages should be verified against the W3C validator to ensure that the markup is well formed. This in and of itself is not directly indicative of good code, but it helps to weed out problems that are able to be tested via automation. It is no substitute for manual code review. (For other validators, see HTML Validation in the Codex.)

	 1.2. Self-closing Elements 
 
All tags must be properly closed. For tags that can wrap nodes such as text or other elements, termination is a trivial enough task. For tags that are self-closing, the forward slash should have exactly one space preceding it.
	
          1.3. Attributes and Tags  

All tags and attributes must be written in lowercase. Additionally, attribute values should be lowercase when the purpose of the text therein is only to be interpreted by machines. For instances in which the data needs to be human readable, proper title capitalization should be followed.

2. CSS Standard:
*---------------------*

            2.1. Structure
  
There are plenty of different methods for structuring a stylesheet. With the CSS in core, it is important to retain a high degree of legibility. This enables subsequent contributors to have a clear understanding of the flow of the document.
•	Use tabs, not spaces, to indent each property.
•	Add two blank lines between sections and one blank line between blocks in a section.
•	Each selector should be on its own line, ending in either a comma or an opening curly brace. Property-value pairs should be on their own line, with one tab of indentation and an ending semicolon. The closing brace should be flush left, using the same level of indentation as the opening selector.

	2.2. Selectors  

With specificity, comes great responsibility. Broad selectors allow us to be efficient, yet can have adverse consequences if not tested. Location-specific selectors can save us time, but will quickly lead to a cluttered stylesheet. Exercise your best judgement to create selectors that find the right balance between contributing to the overall style and layout of the DOM.
•	Similar to the WordPress PHP Coding Standards for file names, use lowercase and separate words with hyphens when naming selectors. Avoid camelcase and underscores.
•	Use human readable selectors that describe what element(s) they style.
•	Attribute selectors should use double quotes around values
•	Refrain from using over-qualified selectors, div.container can simply be stated as .container

	2.3. Properties  

Similar to selectors, properties that are too specific will hinder the flexibility of the design. Less is more. Make sure you are not repeating styling or introducing fixed dimensions (when a fluid solution is more acceptable).
•	Properties should be followed by a colon and a space.
•	All properties and values should be lowercase, except for font names and vendor-specific properties.
•	Use hex code for colors, or rgba() if opacity is needed. Avoid RGB format and uppercase, and shorten values when possible: #fff instead of #FFFFFF.
•	Use shorthand (except when overriding styles) for background, border, font, list-style, margin, and padding values as much as possible. (For a shorthand reference, see CSS Shorthand.)

	2.4. Values  

There are numerous ways to input values for properties. Follow the guidelines below to help us retain a high degree of consistency.
•	Space before the value, after the colon.
•	Do not pad parentheses with spaces.
•	Always end in a semicolon.
•	Use double quotes rather than single quotes, and only when needed, such as when a font name has a space or for the values of the content property.
•	Font weights should be defined using numeric values (e.g. 400 instead of normal, 700 rather than bold).
•	0 values should not have units unless necessary, such as with transition-duration.
•	Line height should also be unit-less, unless necessary to be defined as a specific pixel value. This is more than just a style convention, but is worth mentioning here. More information: http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
•	Use a leading zero for decimal values, including in rgba().
•	Multiple comma-separated values for one property should be separated by either a space or a newline. For better readability newlines should be used for lengthier multi-part values such as those for shorthand properties like box-shadow and text-shadow, including before the first value. Values should then be indented one level in from the property.
•	Lists of values within a value, like within rgba(), should be separated by a space.

	2.5. Commenting 
 
•	Comment, and comment liberally. If there are concerns about file size, utilize minified files and the SCRIPT_DEBUG constant. Long comments should manually break the line length at 80 characters.
•	A table of contents should be utilized for longer stylesheets, especially those that are highly sectioned. Using an index number (1.0, 1.1, 2.0, etc.) aids in searching and jumping to a location.
•	Comments should be formatted much as PHPDoc is. The CSSDoc standard is not necessarily widely accepted or used but some aspects of it may be adopted over time. Section/subsection headers should have newlines before and after. Inline comments should not have empty newlines separating the comment from the item to which it relates.

	2.6. Best Practices  

Stylesheets tend to get long in length. Focus slowly gets lost whilst intended goals start repeating and overlapping. Writing smart code from the outset helps us retain the overview whilst remaining flexible throughout change.
•	If you are attempting to fix an issue, attempt to remove code before adding more.
•	Magic Numbers are unlucky. These are numbers that are used as quick fixes on a one-off basis. Example: .box { margin-top: 37px }.
•	DOM will change over time, target the element you want to use as opposed to “finding it” through its parents. Example: Use .highlight on the element as opposed to .highlight a (where the selector is on the parent)
•	Know when to use the height property. It should be used when you are including outside elements (such as images). Otherwise use line-height for more flexibility.
•	Do not restate default property & value combinations (for instance display: block; on block-level elements).

3. Javascript Standard:
*----------------------------*

	3.1. Code Refactoring 

Many parts of the WordPress code structure for JavaScript are inconsistent in their style. WordPress is working to gradually improve this, so the code will be clean and easy to read at a glance.
While the coding standards are important, refactoring older .js files simply to conform to the standards is not an urgent issue. “Whitespace-only” patches for older files are strongly discouraged.
All new or updated JavaScript code will be reviewed to ensure it conforms to the standards, and passes JSHint.

	3.2. Spacing  

Use spaces liberally throughout your code. “When in doubt, space it out.”
These rules encourage liberal spacing for improved developer readability. The minification process creates a file that is optimized for browsers to read and process.
•	Indentation with tabs.
•	No whitespace at the end of line or on blank lines.
•	Lines should usually be no longer than 80 characters, and should not exceed 100 (counting tabs as 4 spaces). This is a “soft” rule, but long lines generally indicate unreadable or disorganized code.
•	if/else/for/while/try blocks should always use braces, and always go on multiple lines.
•	Unary special-character operators (e.g., ++, --) must not have space next to their operand.
•	Any , and ; must not have preceding space.
•	Any ; used as a statement terminator must be at the end of the line.
•	Any : after a property name in an object definition must not have preceding space.
•	The ? and : in a ternary conditional must have space on both sides.
•	No filler spaces in empty constructs (e.g., {}, [], fn()).
•	There should be a new line at the end of each file.
•	Any ! negation operator should have a following space.*
•	All function bodies are indented by one tab, even if the entire file is wrapped in a closure.*
•	Spaces may align code within documentation blocks or within a line, but only tabs should be used at the start of a line.*
*: The WordPress JavaScript standards prefer slightly broader whitespace rules than the jQuery style guide. These deviations are for consistency between the PHP and JavaScript files in the WordPress codebase.
Whitespace can easily accumulate at the end of a line – avoid this, as trailing whitespace is caught as an error in JSHint. One way to catch whitespace buildup is enabling visible whitespace characters within your text editor.

	3.3. Objects  

Object declarations can be made on a single line if they are short (remember the line length guidelines). When an object declaration is too long to fit on one line, there must be one property per line. Property names only need to be quoted if they are reserved words or contain special characters:
Objects and arrays can be declared on a single line if they are short (remember the line length guidelines). When an object or array is too long to fit on one line, each member must be placed on its own line and each line ended by a comma.

	3.4. Semicolons  

Use them. Never rely on Automatic Semicolon Insertion (ASI).
Blocks and Curly Braces #Blocks and Curly Braces
if, else, for, while, and try blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.
Indentation and Line Breaks #Indentation and Line Breaks
Indentation and line breaks add readability to complex statements.
Tabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab.

	3.5. Blocks and Curly Braces  

if, else, for, while, and try blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.
Declaring Variables With var #Declaring Variables With var
Each function should begin with a single comma-delimited var statement that declares any local variables necessary. If a function does not declare a variable using var, that variable can leak into an outer scope (which is frequently the global scope, a worst-case scenario), and can unwittingly refer to and modify that data.
Assignments within the var statement should be listed on individual lines, while declarations can be grouped on a single line. Any additional lines should be indented with an additional tab. Objects and functions that occupy more than a handful of lines should be assigned outside of the var statement, to avoid over-indentation.

         3.6. Comments

Comments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (//) and the comment text.

	3.7. Equality  

Strict equality checks (===) must be used in favor of abstract equality checks (==).
Switch Statements #Switch Statements
The usage of switch statements is generally discouraged, but can be useful when there are a large number of cases – especially when multiple cases can be handled by the same block, or fall-through logic (the default case) can be leveraged.
When using switch statements:
•	Use a break for each case other than default. When allowing statements to “fall through,” note that explicitly.
•	Indent case statements one tab within the switch.

	3.8. Arrays  

Creating arrays in JavaScript should be done using the shorthand [] constructor rather than the new Array() notation.

	3.9. JSHint  

JSHint is an automated code quality tool, designed to catch errors in your JavaScript code. JSHint is used in WordPress development to quickly verify that a patch has not introduced any logic or syntax errors to the front-end.
